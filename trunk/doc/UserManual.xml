<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article>
  <articleinfo>
    <title>LibSerial Documentation</title>
    
  </articleinfo>
  <sect1>
    <title>Feature Summary</title>
    <itemizedlist>
      <listitem>
	<para>Simplified serial port programming in C++ under POSIX
    operating systems.</para>
      </listitem>
      <listitem>
	<para>Support for USB-serial converters.</para>
      </listitem>
      <listitem>
	<para>Access serial ports from scripting languages such as
	PHP, Python, Perl, Ruby, and Java (coming soon in version
	0.6.0).</para>
      </listitem>
    </itemizedlist>
  </sect1>
  <sect1>
    <title>Description</title> 

    <para>LibSerial provides a collection of C++ classes that allow
    one to access serial ports on POSIX systems like standard C++
    iostream objects. The SerialStream class represents the primary
    class that is expected to be used by developers to access serial
    ports as iostream objects. Additionally a SerialPort class is
    available to provide access to serial ports without using the
    standard C++ iostream interface. This is useful for embedded
    systems where a complete C++ STL may not be available. Member
    functions are provided for setting various parameters of the
    serial ports such as the baud rate, character size, flow control
    and others. The idea is to simplify serial port programming on
    POSIX systems. For example, using libserial, you can do the
    following:</para>
    
    <programlisting>
#include &lt;SerialStream.h&gt;
//
// Open the serial port. 
//
SerialStream serial_port( "/dev/ttyS0" ) ;
//
// Set the baud rate of the serial port.
//
serial_port.SetBaudRate( SerialStreamBuf::BAUD_9600 ) ;
//
// Read a character from the serial port. 
//
char next_char ; 
serial_port >> next_char ; 
//
// Write the character back to the serial port. 
//
serial_port << next_char ;
</programlisting>

    <para>In addition to the C++ programming languge, LibSerial
    releases after version 0.6.0 also provide bindings to several
    scripting languages such as Python, Perl, PHP, Java, and
    Ruby. This provides developers a wide range languages to select
    when writing applications that need access to serial ports on
    POSIX compatible operating systems.</para>

    <para>LibSerial has received most extensive testing under Linux
    operating system. It is currently being tested on Mac OS X and
    version 0.6.0 will support Mac OS X operating system. There are no
    plans to port this library to Microsoft Windows operating system
    at this point (including the use of Cygwin).</para> 
  </sect1>

  <sect1>
    <title>Download</title>
    
    <para>The latest version of LibSerial is 0.5.2. You can download
    the source code for LibSerial-0.5.2 from <ulink
    url="http://prdownloads.sourceforge.net/libserial/libserial-0.5.2.tar.gz?download">here</ulink>. Older
    versions of LibSerial can be downloaded from <ulink
    url="http://sourceforge.net/project/showfiles.php?group_id=9432">here</ulink>.</para>
    
  </sect1>

  <sect1>
    <title>Install</title>
    <para></para>
  </sect1>
  
  <sect1>
    <title>Tutorial</title>
    <sect2>
      <title>Opening a Serial Port I/O Stream</title>

      <para>A serial port I/O stream, SerialStream, instance can be
      created and opened by providing the name of the serial port
      device to the constructor: </para>
      <programlisting> 
#include &lt;SerialStream.h&gt;
//
using namespace LibSerial ;
//
// Create and open the serial port for communication. 
//
SerialStream my_serial_stream( "/dev/ttyS0" ) ;
</programlisting>
      <para>In certain applications, the name of the serial port
      device may not be known when the SerialStream instance is
      created. In such cases, the same effect as above can be achieved
      as follows: </para>
      <programlisting>
#include &lt;SerialStream.h&gt;
//
using namespace LibSerial ;
//
// Create a SerialStream instance.
// 
SerialStream my_serial_stream ;
//
// Open the serial port for communication.
// 
my_serial_stream.Open( "/dev/ttyS0" ) ;
</programlisting>
    </sect2>

    <sect2>
      <title>Setting the Baud Rate</title> 

      <para>The baud rate for the SerialStream can be set using the
      SerialStream::SetBaudRate() member function. </para>
      <programlisting>
//
// The various available baud rates are defined in SerialStreamBuf class. 
// This is to be changed soon. All serial port settings will be placed in
// in the SerialPort class.
//
my_serial_stream.SetBaudRate( SerialStreamBuf::BAUD_115200 ) ;
</programlisting>
    </sect2>
    
    <sect2>
      <title>Setting the Character Size</title>
      <para></para>
      <programlisting>
//
// Use 8 bit wide characters. 
//
my_serial_port.SetCharSize( SerialStreamBuf::CHAR_SIZE_8 ) ;
</programlisting>
    </sect2>
    
    <sect2>
      <title>Setting the Number of Stop Bits</title>
      <para></para>
      <programlisting>
//
// Use one stop bit. 
//
my_serial_port.SetNumOfStopBits(1) ;
</programlisting>
    </sect2>

    <sect2>
      <title>Setting the Parity Type</title>
      <programlisting>
//
// Use odd parity during serial communication. 
// 
my_serial_port.SetParity( SerialStreamBuf::PARITY_ODD ) ;
</programlisting>
    </sect2>

    <sect2>
      <title>Setting the Flow-Control Type</title>
      <programlisting>
// 
// Use hardware flow-control. 
//
my_serial_port.SetFlowControl( SerialStreamBuf::FLOW_CONTROL_HARD ) ;
</programlisting>
    </sect2>

    <sect2>
      <title>Reading Characters</title>

      <para>Characters can be read from the serial port using standard
      iostream "&gt;&gt;" operator. For example:</para>
      <programlisting>
//
// Read one character from the serial port. 
//
char next_char ;
my_serial_stream &gt;&gt; next_char ;
//
// You can also read other types of values from the serial port in a similar fashion. 
//
int data_size ;
my_serial_stream &gt;&gt; data_size ;
</programlisting>

      <para>All other methods of standard C++ iostream objects are
      available too. For example, one can read characters from the
      serial port using the get() method: </para>

      <programlisting>
// 
// Read one byte from the serial port. 
//
char next_byte ;
my_serial_stream.get( next_byte ) ;
</programlisting>
    </sect2>

    <sect2>
      <title>Writing Characters</title>
      <programlisting>
// 
// Write a single character to the serial port. 
//
my_serial_stream &lt;&lt; 'U' ;
//
// You can write a whole string. 
//
my_serial_stream &lt;&lt; "Hello, Serial Port." &lt;&lt; std::endl ;
//
// In fact, you can pretty much write any type of object that 
// is supported by a "&lt;&lt;" operator. 
//
double radius = 2.0 ;
double area = M_PI * 2.0 * 2.0 ;
my_serial_stream &lt;&lt; area &lt;&lt; std::endl ;
</programlisting>
    </sect2>

    <sect2>
      <title>Reading Blocks of Data</title>
      <programlisting>
//
// Read a whole array of data from the serial port. 
//
const int BUFFER_SIZE = 256 ;
char input_buffer[BUFFER_SIZE] ; 
//
my_serial_stream.read( input_buffer, 
                       BUFFER_SIZE ) ;
</programlisting>
    </sect2>

    <sect2>
      <title>Writing Blocks of Data</title>
      <programlisting>
//
// Write an array of data from the serial port. 
//
const int BUFFER_SIZE = 256 ;
char output_buffer[BUFFER_SIZE] ; 
//
for(int i=0; i&lt;BUFFER_SIZE; ++i) 
{
    output_buffer[i] = i ;
}
//
my_serial_stream.write( output_buffer, 
                        BUFFER_SIZE ) ;
</programlisting>
    </sect2>
    <sect2>
      <title>Closing the Serial Port</title>
      <programlisting>
my_serial_port.Close() ;
</programlisting>
    </sect2>
    
    <sect2>
      <title>Complete Example Programs</title>
      
      <!-- :TODO: Complete this section. -->
      <para>Coming soon.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>API Documentation</title> 

    <para>The API documentation generated by
    <command>doxygen</command> is available <ulink
    url="doxygen">here</ulink>.</para>
  </sect1>

  <sect1>
    <title>Design Documentation</title>
    <para></para>
  </sect1>

  <sect1>
    <title>Links</title>
    <itemizedlist>
      <listitem>
	<para><ulink
	url="http://sourceforge.net/projects/libserial/">LibSerial
	Summary Page</ulink> at SourceForge</para>
      </listitem>
      <listitem>
	<para><ulink
	url="http://freshmeat.net/projects/libserial/">LibSerial
	Summary Page</ulink> at FreshMeat</para>
      </listitem>
      <listitem>
	<para><ulink url="http://www.gnu.org/software/commoncpp/">GNU
	CommonC++</ulink> is an excellent collection of a variety of
	C++ classes including a set of classes that can be used for
	programming serial ports. GNU CommonC++ is also cross-platform
	(it runs on POSIX as well as Win32 systems).</para>
      </listitem>
      <listitem>
	<para><ulink
	url="http://www.easysw.com/~mike/serial/">Serial
	Programming Guide for POSIX operating systems</ulink>. A lot
	of code in LibSerial is based on information obtained from
	Michael R. Sweet's guide to serial programming. Thanks,
	Mike.</para>
      </listitem>
    </itemizedlist>
  </sect1>
</article>
